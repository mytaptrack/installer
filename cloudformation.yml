
Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-0db36bcbb6bf68b98  # AWS Linux ARM64
    us-east-2:
      AMI: ami-0779fe5e56472b841  # AWS Linux ARM64
    us-west-1:
      AMI: ami-08b5fae7084200be9  # AWS Linux ARM64
    us-west-2:
      AMI: ami-0f39276b2d3b617c4  # AWS Linux ARM64
    ca-central-1:
      AMI: ami-02f23bd45a5aca055  # AWS Linux ARM64
    eu-west-1:
      AMI: ami-050f21086f4c30842  # AWS Linux ARM64
    eu-west-2:
      AMI: ami-06f94d7cfec0d7541  # AWS Linux ARM64
    eu-west-3:
      AMI: ami-0824fcaa23a28b8e3  # AWS Linux ARM64
    eu-central-1:
      AMI: ami-08e6029eb75badecc  # AWS Linux ARM64
    eu-north-1:
      AMI: ami-0fa38efbb587e9f2a  # AWS Linux ARM64
    ap-south-1:
      AMI: ami-0f4448044b7b1e09b  # AWS Linux ARM64
    ap-northeast-1:
      AMI: ami-06f8ebd29e0d94163  # AWS Linux ARM64
    ap-southeast-1:
      AMI: ami-0fccc46d9ea7914b4  # AWS Linux ARM64
    ap-southeast-2:
      AMI: ami-0719aba35db68e28a  # AWS Linux ARM64

Parameters:
  # Make Parameters for VPC and Subnet selection
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: "VPC to use"
  SubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: "Subnet to use"
  
  Password:
    NoEcho: true
    Type: String
    Description: "Password for the installation website"
    MinLength: 1
    MaxLength: 41
    
  InstanceType:
    Type: String
    Default: "t4g.small"
    Description: "EC2 instance type"
    
  # KeyName:
  #   Type: AWS::EC2::KeyPair::KeyName
  #   Description: "Name of an existing EC2 KeyPair to enable SSH access to the instance"

Resources:
  # Create ECSClusterContainerSecurityGroup
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "ECS Cluster Container Access"
      VpcId: !Ref VpcId
      # Add incoming port 8501 from the internet
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8501
          ToPort: 8501
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: "Name"
          Value: "ECS Cluster SG"

  # Create IAM role for EC2 instance
  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: mytaptrack-installer-instance-role
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  # Allow read access to SSM Parameter Store
                  - "ssm:GetParameters"
                  - "ssm:GetParameter"
                  - "ssm:GetParameterHistory"
                  - "ssm:GetParametersByPath"
                  # Allow writing logs to CloudWatch
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "s3:*"
                  - "ssm:*"
                  - "kms:*"
                  - "cloudformation:*"
                  - "codebuild:*"
                  - "secretsmanager:*"
                Effect: Allow
                Resource: "*"

  # Create instance profile for EC2 instance
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref EC2InstanceRole

  # Create EC2 instance
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
      IamInstanceProfile: !Ref EC2InstanceProfile
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      SubnetId: !Ref SubnetId
      Tags:
        - Key: Name
          Value: mytaptrack-installer
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          # Update and install dependencies
          yum update
          yum -y install git python3 python3-pip npm gnupg unzip make
          
          # Install AWS CLI
          curl "https://awscli.amazonaws.com/awscli-exe-linux-aarch64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          ./aws/install
          
          # Install global npm packages
          npm i aws-cdk esbuild -g
          
          # Clone the repository
          git clone https://github.com/mytaptrack/installer.git /opt/installer
          cd /opt/installer
          python3 -m venv .venv
          . .venv/bin/activate
          pip install -r requirements.txt
          
          # Set environment variables
          echo "PASSWORD=${Password}" >> /etc/environment
          echo "AWS_REGION=${AWS::Region}" >> /etc/environment
          echo "AWS_DEFAULT_REGION=${AWS::Region}" >> /etc/environment
          echo "CDK_DEFAULT_REGION=${AWS::Region}" >> /etc/environment
          . /etc/environment
          
          # Configure CloudWatch logs
          mkdir -p /var/log/mytaptrack
          
          # Set up application to start on boot
          cat > /etc/systemd/system/mytaptrack-installer.service << 'EOF'
          [Unit]
          Description=MyTapTrack Installer
          After=network.target
          
          [Service]
          Environment=PASSWORD=${Password}
          WorkingDirectory=/opt/installer
          ExecStart=make fullrun
          Restart=always
          
          [Install]
          WantedBy=multi-user.target
          EOF

          # Write aws config file and set default region
          mkdir -p ~/.aws
          cat > ~/.aws/config << 'EOF'
          [default]
          output=json
          region=${AWS::Region}
          EOF
          
          # Enable and start the service
          systemctl enable mytaptrack-installer
          systemctl start mytaptrack-installer

Outputs:  
  SetupWebpage:
    Value: !Sub "http://${EC2Instance.PublicIp}:8501"
