
Parameters:
  # Make Parameters for VPC and Subnet selection
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: "VPC to use"
  SubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: "Subnet to use"
  SubnetId2:
    Type: AWS::EC2::Subnet::Id
    Description: "A different subnet to use"
  
  Password:
    NoEcho: true
    Type: String
    Description: "Password for the installation website"
    MinLength: 1
    MaxLength: 41

Resources:

  # Create a cloudwatch log group

  CloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "mytaptrack/installer"
      RetentionInDays: 7


  # Create ECSClusterTaskExecutionRoleARN
  ECSClusterTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "ecs-tasks.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: "AmazonECSTaskExecutionRolePolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ecr:GetAuthorizationToken"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchGetImage"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"

  # Create ECSClusterContainerSecurityGroup
  ECSClusterContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "ECS Cluster Container Access"
      VpcId: !Ref VpcId
      # Add incoming port 8501 from the internet
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8501
          ToPort: 8501
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: "Name"
          Value: "ECS Cluster SG"

  # # Create Fargate Cluster, Service and Task
  FargateCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: mytaptrack-installer-cluster

  AdminTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: mytaptrack-installer-task-role
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                     # Allow read access to SSM Parameter Store
                  - "ssm:GetParameters"
                  - "ssm:GetParameter"
                  - "ssm:GetParameterHistory"
                  - "ssm:GetParametersByPath"

                  # Allow writing logs to CloudWatch
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "s3:*"
                  - "ssm:*"
                  - "kms:*"
                  - "cloudformation:*"
                  - "codebuild:*"
                  - "secretsmanager:*"
                  - "ecr:*"
                  - "ecs:*"
                  - "lambda:*"
                  - "dynamodb:*"
                Effect: Allow
                Resource: "*"
  FargateTask:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: mytaptrack-installer-task
      Cpu: '256'
      Memory: '512'
      NetworkMode: awsvpc
      RuntimePlatform:
        CpuArchitecture: ARM64
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt ECSClusterTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt AdminTaskRole.Arn
      ContainerDefinitions:
        - Name: installer
          Image: mytaptrack/installer
          Cpu: 256
          Memory: 512
          PortMappings:
            - ContainerPort: 8501
          Environment:
            - Name: "PASSWORD"
              Value: !Ref Password
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: "mytaptrack/installer"
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: "ecs"

  FargateService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: mytaptrack-installer-service
      Cluster: !Ref FargateCluster
      DesiredCount: 1
      TaskDefinition: !Ref FargateTask
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: "installer"
          ContainerPort: 8501
          TargetGroupArn: !Ref TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref ECSClusterContainerSecurityGroup
          Subnets:
            - !Ref SubnetId
  
  # Create application load balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: "Application-LB"
      Type: "application"
      SecurityGroups:
        - !Ref ECSClusterContainerSecurityGroup
      Subnets:
        - !Ref SubnetId
        - !Ref SubnetId2
  
  # Create target group for the application load balancer
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: "Application-TG"
      Protocol: HTTP
      Port: 8501
      VpcId: !Ref VpcId
      TargetType: ip
      HealthCheckPath: "/"
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
    
  # Create a listener for the application load balancer
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 8501
      Protocol: HTTP
Outputs:
  # Output the tasks public ip address
  PublicUrl:
    Description: "Fargate Service Public IP"
    Value: !Join [":", [!GetAtt ApplicationLoadBalancer.DNSName, "8501"]]